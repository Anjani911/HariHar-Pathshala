import React, { useState } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  ScrollView,
  SafeAreaView,
  Alert,
  Switch,
} from 'react-native';

interface MissingDataScreenProps {
  onBack?: () => void;
}

const MissingDataScreen: React.FC<MissingDataScreenProps> = ({ onBack }) => {
  const [autoFlaggingEnabled, setAutoFlaggingEnabled] = useState(true);
  const [selectedSeverity, setSelectedSeverity] = useState('all');

  // Sample missing data with auto flagging
  const missingDataFlags = [
    {
      id: 1,
      type: 'school',
      severity: 'critical',
      title: '‡§∏‡•ç‡§ï‡•Ç‡§≤ ‡§∏‡•á ‡§ï‡•ã‡§à ‡§´‡•ã‡§ü‡•ã ‡§Ö‡§™‡§≤‡•ã‡§° ‡§®‡§π‡•Ä‡§Ç',
      description: '‡§∞‡§æ‡§ú‡§ï‡•Ä‡§Ø ‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï ‡§∂‡§æ‡§≤‡§æ ‡§≠‡§Ç‡§°‡§æ‡§∞‡§™‡•Å‡§∞ ‡§∏‡•á ‡§™‡§ø‡§õ‡§≤‡•á 7 ‡§¶‡§ø‡§®‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§à ‡§´‡•ã‡§ü‡•ã ‡§Ö‡§™‡§≤‡•ã‡§° ‡§®‡§π‡•Ä‡§Ç ‡§π‡•Å‡§à',
      schoolName: '‡§∞‡§æ‡§ú‡§ï‡•Ä‡§Ø ‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï ‡§∂‡§æ‡§≤‡§æ ‡§≠‡§Ç‡§°‡§æ‡§∞‡§™‡•Å‡§∞',
      udiseCode: '20140304510',
      block: '‡§ï‡•ã‡§∞‡§¨‡§æ',
      cluster: '‡§≠‡§Ç‡§°‡§æ‡§∞‡§™‡•Å‡§∞',
      headTeacher: '‡§∂‡•ç‡§∞‡•Ä ‡§∞‡§æ‡§Æ‡§ï‡•É‡§∑‡•ç‡§£ ‡§µ‡§∞‡•ç‡§Æ‡§æ',
      contact: '9876543220',
      lastActivity: '2024-12-09 10:30',
      daysInactive: 7,
      expectedUploads: 85,
      actualUploads: 0,
      flaggedOn: '2024-12-16 09:00',
      actionRequired: '‡§§‡§§‡•ç‡§ï‡§æ‡§≤ ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç',
    },
    {
      id: 2,
      type: 'teacher',
      severity: 'high',
      title: '‡§∂‡§ø‡§ï‡•ç‡§∑‡§ï ‡§≤‡§ó‡§æ‡§§‡§æ‡§∞ ‡§Ö‡§®‡•Å‡§™‡§∏‡•ç‡§•‡§ø‡§§',
      description: '‡§∂‡•ç‡§∞‡•Ä‡§Æ‡§§‡•Ä ‡§∏‡•Å‡§®‡•Ä‡§§‡§æ ‡§¶‡•á‡§µ‡•Ä ‡§™‡§ø‡§õ‡§≤‡•á 4 ‡§¶‡§ø‡§®‡•ã‡§Ç ‡§∏‡•á ‡§Ö‡§™‡§≤‡•ã‡§° ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§∞‡§π‡•Ä',
      schoolName: '‡§∞‡§æ‡§ú‡§ï‡•Ä‡§Ø ‡§Æ‡§ß‡•ç‡§Ø ‡§∂‡§æ‡§≤‡§æ ‡§∏‡§ø‡§Æ‡§ó‡§æ',
      udiseCode: '20140304508',
      block: '‡§∞‡§æ‡§Ø‡§™‡•Å‡§∞',
      cluster: '‡§∏‡§ø‡§Æ‡§ó‡§æ',
      headTeacher: '‡§∂‡•ç‡§∞‡•Ä‡§Æ‡§§‡•Ä ‡§∏‡•Å‡§®‡•Ä‡§§‡§æ ‡§¶‡•á‡§µ‡•Ä',
      contact: '9876543218',
      lastActivity: '2024-12-12 14:20',
      daysInactive: 4,
      expectedUploads: 65,
      actualUploads: 42,
      flaggedOn: '2024-12-16 10:30',
      actionRequired: '‡§Ö‡§®‡•Å‡§∏‡•ç‡§Æ‡§æ‡§∞‡§ï ‡§≠‡•á‡§ú‡•á‡§Ç',
    },
    {
      id: 3,
      type: 'data',
      severity: 'medium',
      title: '‡§Ö‡§ß‡•Ç‡§∞‡•Ä ‡§õ‡§æ‡§§‡•ç‡§∞ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä',
      description: '25 ‡§õ‡§æ‡§§‡•ç‡§∞‡•ã‡§Ç ‡§ï‡•Ä ‡§´‡•ã‡§ü‡•ã ‡§Æ‡•á‡§Ç ‡§™‡•á‡§°‡§º ‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§ó‡§æ‡§Ø‡§¨ ‡§π‡•à',
      schoolName: '‡§∞‡§æ‡§ú‡§ï‡•Ä‡§Ø ‡§â‡§ö‡•ç‡§ö ‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï ‡§∂‡§æ‡§≤‡§æ ‡§¶‡•á‡§µ‡§∞‡•Ä',
      udiseCode: '20140304506',
      block: '‡§≠‡§ø‡§≤‡§æ‡§à',
      cluster: '‡§¶‡•á‡§µ‡§∞‡•Ä',
      headTeacher: '‡§∂‡•ç‡§∞‡•Ä ‡§Ö‡§ú‡§Ø ‡§ï‡•Å‡§Æ‡§æ‡§∞',
      contact: '9876543216',
      lastActivity: '2024-12-16 13:45',
      daysInactive: 0,
      expectedUploads: 95,
      actualUploads: 70,
      flaggedOn: '2024-12-16 14:00',
      actionRequired: '‡§°‡•á‡§ü‡§æ ‡§™‡•Ç‡§∞‡§æ ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂',
    },
    {
      id: 4,
      type: 'target',
      severity: 'low',
      title: '‡§Æ‡§æ‡§∏‡§ø‡§ï ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø ‡§∏‡•á ‡§™‡§ø‡§õ‡§°‡§º‡§æ‡§µ',
      description: '‡§∏‡•ç‡§ï‡•Ç‡§≤ ‡§Ö‡§™‡§®‡•á ‡§Æ‡§æ‡§∏‡§ø‡§ï ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø ‡§∏‡•á 15% ‡§™‡•Ä‡§õ‡•á ‡§π‡•à',
      schoolName: '‡§∞‡§æ‡§ú‡§ï‡•Ä‡§Ø ‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï ‡§∂‡§æ‡§≤‡§æ ‡§ñ‡•Å‡§∞‡•ç‡§∏‡•Ä‡§™‡§æ‡§∞',
      udiseCode: '20140304501',
      block: '‡§∞‡§æ‡§Ø‡§™‡•Å‡§∞',
      cluster: '‡§ñ‡•Å‡§∞‡•ç‡§∏‡•Ä‡§™‡§æ‡§∞',
      headTeacher: '‡§∂‡•ç‡§∞‡•Ä ‡§∞‡§æ‡§Æ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∂',
      contact: '9876543215',
      lastActivity: '2024-12-16 11:20',
      daysInactive: 0,
      expectedUploads: 80,
      actualUploads: 68,
      flaggedOn: '2024-12-16 12:00',
      actionRequired: '‡§™‡•ç‡§∞‡•á‡§∞‡§£‡§æ ‡§î‡§∞ ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ',
    },
    {
      id: 5,
      type: 'quality',
      severity: 'high',
      title: '‡§´‡•ã‡§ü‡•ã ‡§ó‡•Å‡§£‡§µ‡§§‡•ç‡§§‡§æ ‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ',
      description: '40% ‡§´‡•ã‡§ü‡•ã ‡§Æ‡•á‡§Ç ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü‡§§‡§æ ‡§ï‡•Ä ‡§ï‡§Æ‡•Ä, ‡§™‡•Å‡§®‡§É ‡§Ö‡§™‡§≤‡•ã‡§° ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï',
      schoolName: '‡§∞‡§æ‡§ú‡§ï‡•Ä‡§Ø ‡§Æ‡§ß‡•ç‡§Ø ‡§∂‡§æ‡§≤‡§æ ‡§®‡§æ‡§Ç‡§¶‡§ó‡§æ‡§Ç‡§µ',
      udiseCode: '20140304507',
      block: '‡§¶‡•Å‡§∞‡•ç‡§ó',
      cluster: '‡§®‡§æ‡§Ç‡§¶‡§ó‡§æ‡§Ç‡§µ',
      headTeacher: '‡§∂‡•ç‡§∞‡•Ä‡§Æ‡§§‡•Ä ‡§™‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§Æ‡§ø‡§∂‡•ç‡§∞‡§æ',
      contact: '9876543217',
      lastActivity: '2024-12-16 09:30',
      daysInactive: 0,
      expectedUploads: 72,
      actualUploads: 72,
      flaggedOn: '2024-12-16 15:00',
      actionRequired: '‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç',
    },
  ];

  const severityOptions = [
    { id: 'all', label: '‡§∏‡§≠‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ‡§è‡§Ç', color: '#333' },
    { id: 'critical', label: '‡§ó‡§Ç‡§≠‡•Ä‡§∞', color: '#D32F2F' },
    { id: 'high', label: '‡§â‡§ö‡•ç‡§ö', color: '#F44336' },
    { id: 'medium', label: '‡§Æ‡§ß‡•ç‡§Ø‡§Æ', color: '#FF9800' },
    { id: 'low', label: '‡§®‡§ø‡§Æ‡•ç‡§®', color: '#4CAF50' },
  ];

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return '#D32F2F';
      case 'high': return '#F44336';
      case 'medium': return '#FF9800';
      case 'low': return '#4CAF50';
      default: return '#666';
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'critical': return 'üö®';
      case 'high': return '‚ö†Ô∏è';
      case 'medium': return 'üì¢';
      case 'low': return 'üí°';
      default: return '‚ùì';
    }
  };

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'school': return 'üè´';
      case 'teacher': return 'üë®‚Äçüè´';
      case 'data': return 'üìä';
      case 'target': return 'üéØ';
      case 'quality': return 'üì∏';
      default: return '‚ùì';
    }
  };

  const filteredFlags = missingDataFlags.filter((flag) => {
    if (selectedSeverity === 'all') return true;
    return flag.severity === selectedSeverity;
  });

  const handleTakeAction = (flag: any) => {
    const actions = [];
    
    if (flag.contact) {
      actions.push({ text: '‡§ï‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç', onPress: () => Alert.alert('‡§ï‡•â‡§≤', `‡§ï‡•â‡§≤ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à: ${flag.contact}`) });
      actions.push({ text: 'SMS ‡§≠‡•á‡§ú‡•á‡§Ç', onPress: () => Alert.alert('SMS', '‡§Ö‡§®‡•Å‡§∏‡•ç‡§Æ‡§æ‡§∞‡§ï SMS ‡§≠‡•á‡§ú‡§æ ‡§ó‡§Ø‡§æ') });
    }
    
    actions.push({ text: '‡§®‡•ã‡§ü ‡§ú‡•ã‡§°‡§º‡•á‡§Ç', onPress: () => Alert.alert('‡§®‡•ã‡§ü', '‡§®‡•ã‡§ü ‡§ú‡•ã‡§°‡§º‡§®‡•á ‡§ï‡•Ä ‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ ‡§ú‡§≤‡•ç‡§¶ ‡§Ü‡§è‡§ó‡•Ä') });
    actions.push({ text: '‡§´‡•ç‡§≤‡•à‡§ó ‡§π‡§ü‡§æ‡§è‡§Ç', onPress: () => Alert.alert('‡§∏‡§´‡§≤‡§§‡§æ!', '‡§´‡•ç‡§≤‡•à‡§ó ‡§π‡§ü‡§æ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ') });
    actions.push({ text: '‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡•á‡§Ç', style: 'cancel' as const });

    Alert.alert(
      '‡§ï‡§æ‡§∞‡•ç‡§∞‡§µ‡§æ‡§à ‡§ö‡•Å‡§®‡•á‡§Ç',
      `${flag.title}\n\n${flag.actionRequired}`,
      actions
    );
  };

  const handleBulkAction = () => {
    Alert.alert(
      '‡§∏‡§æ‡§Æ‡•Ç‡§π‡§ø‡§ï ‡§ï‡§æ‡§∞‡•ç‡§∞‡§µ‡§æ‡§à',
      '‡§∏‡§≠‡•Ä ‡§´‡•ç‡§≤‡•à‡§ó‡•ç‡§° ‡§∏‡•ç‡§ï‡•Ç‡§≤‡•ã‡§Ç ‡§ï‡•ã ‡§ï‡§æ‡§∞‡•ç‡§∞‡§µ‡§æ‡§à ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ö‡•Å‡§®‡•á‡§Ç:',
      [
        { text: '‡§∏‡§≠‡•Ä ‡§ï‡•ã SMS ‡§≠‡•á‡§ú‡•á‡§Ç', onPress: () => Alert.alert('‡§∏‡§´‡§≤‡§§‡§æ!', '‡§∏‡§≠‡•Ä ‡§ï‡•ã ‡§Ö‡§®‡•Å‡§∏‡•ç‡§Æ‡§æ‡§∞‡§ï SMS ‡§≠‡•á‡§ú‡•á ‡§ó‡§è') },
        { text: '‡§ó‡§Ç‡§≠‡•Ä‡§∞ ‡§Æ‡§æ‡§Æ‡§≤‡•ã‡§Ç ‡§ï‡•ã ‡§ï‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç', onPress: () => Alert.alert('‡§∏‡§´‡§≤‡§§‡§æ!', '‡§ó‡§Ç‡§≠‡•Ä‡§∞ ‡§Æ‡§æ‡§Æ‡§≤‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§ï‡•â‡§≤ ‡§ï‡§ø‡§è ‡§ó‡§è') },
        { text: '‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§ú‡•á‡§®‡§∞‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç', onPress: () => Alert.alert('‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü', '‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§ï‡•Ä ‡§ú‡§æ ‡§∞‡§π‡•Ä ‡§π‡•à...') },
        { text: '‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡•á‡§Ç', style: 'cancel' },
      ]
    );
  };

  const renderFlagCard = (flag: any) => {
    return (
      <View key={flag.id} style={[styles.flagCard, { borderLeftColor: getSeverityColor(flag.severity) }]}>
        <View style={styles.flagHeader}>
          <View style={styles.flagTitleSection}>
            <View style={styles.iconRow}>
              <Text style={styles.typeIcon}>{getTypeIcon(flag.type)}</Text>
              <Text style={styles.severityIcon}>{getSeverityIcon(flag.severity)}</Text>
            </View>
            <Text style={styles.flagTitle}>{flag.title}</Text>
          </View>
          <View style={[styles.severityBadge, { backgroundColor: getSeverityColor(flag.severity) }]}>
            <Text style={styles.severityText}>{flag.severity.toUpperCase()}</Text>
          </View>
        </View>

        <Text style={styles.flagDescription}>{flag.description}</Text>

        <View style={styles.schoolInfoSection}>
          <View style={styles.schoolInfo}>
            <Text style={styles.schoolName}>{flag.schoolName}</Text>
            <Text style={styles.schoolDetails}>
              üìç {flag.block} ‡§¨‡•ç‡§≤‡•â‡§ï, {flag.cluster} ‡§ï‡•ç‡§≤‡§∏‡•ç‡§ü‡§∞
            </Text>
            <Text style={styles.schoolDetails}>
              UDISE: {flag.udiseCode}
            </Text>
          </View>
        </View>

        <View style={styles.statsSection}>
          <View style={styles.statItem}>
            <Text style={styles.statLabel}>‡§Ö‡§Ç‡§§‡§ø‡§Æ ‡§ó‡§§‡§ø‡§µ‡§ø‡§ß‡§ø:</Text>
            <Text style={styles.statValue}>{flag.lastActivity}</Text>
          </View>
          
          <View style={styles.statItem}>
            <Text style={styles.statLabel}>‡§®‡§ø‡§∑‡•ç‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§¶‡§ø‡§®:</Text>
            <Text style={[styles.statValue, { 
              color: flag.daysInactive > 5 ? '#F44336' : flag.daysInactive > 2 ? '#FF9800' : '#4CAF50'
            }]}>
              {flag.daysInactive} ‡§¶‡§ø‡§®
            </Text>
          </View>
          
          <View style={styles.statItem}>
            <Text style={styles.statLabel}>‡§™‡•ç‡§∞‡§ó‡§§‡§ø:</Text>
            <Text style={styles.statValue}>
              {flag.actualUploads}/{flag.expectedUploads}
            </Text>
          </View>
        </View>

        <View style={styles.contactInfo}>
          <Text style={styles.contactLabel}>‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï: {flag.headTeacher}</Text>
          <Text style={styles.contactNumber}>üìû {flag.contact}</Text>
        </View>

        <View style={styles.actionSection}>
          <Text style={styles.actionRequired}>üéØ {flag.actionRequired}</Text>
          
          <TouchableOpacity 
            style={[styles.actionButton, { backgroundColor: getSeverityColor(flag.severity) }]}
            onPress={() => handleTakeAction(flag)}
          >
            <Text style={styles.actionButtonText}>‡§ï‡§æ‡§∞‡•ç‡§∞‡§µ‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç</Text>
          </TouchableOpacity>
        </View>

        <View style={styles.flagFooter}>
          <Text style={styles.flaggedTime}>‚è∞ ‡§´‡•ç‡§≤‡•à‡§ó ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ: {flag.flaggedOn}</Text>
        </View>
      </View>
    );
  };

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView showsVerticalScrollIndicator={false}>
        {/* Header */}
        <View style={styles.header}>
          <TouchableOpacity style={styles.backButton} onPress={onBack}>
            <Text style={styles.backButtonText}>‚Üê ‡§µ‡§æ‡§™‡§∏</Text>
          </TouchableOpacity>
          
          <View style={styles.titleSection}>
            <Text style={styles.title}>üö© Auto Flagging Missing Data</Text>
            <Text style={styles.subtitle}>‡§∏‡•ç‡§µ‡§ö‡§æ‡§≤‡§ø‡§§ ‡§°‡•á‡§ü‡§æ ‡§®‡§ø‡§ó‡§∞‡§æ‡§®‡•Ä ‡§î‡§∞ ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä ‡§∏‡§ø‡§∏‡•ç‡§ü‡§Æ</Text>
          </View>
        </View>

        {/* Auto Flagging Controls */}
        <View style={styles.controlsContainer}>
          <View style={styles.autoFlaggingControl}>
            <View style={styles.controlInfo}>
              <Text style={styles.controlTitle}>ü§ñ ‡§∏‡•ç‡§µ‡§ö‡§æ‡§≤‡§ø‡§§ ‡§´‡•ç‡§≤‡•à‡§ó‡§ø‡§Ç‡§ó</Text>
              <Text style={styles.controlSubtitle}>‡§∞‡§ø‡§Ø‡§≤-‡§ü‡§æ‡§á‡§Æ ‡§°‡•á‡§ü‡§æ ‡§Æ‡•â‡§®‡§ø‡§ü‡§∞‡§ø‡§Ç‡§ó ‡§ö‡§æ‡§≤‡•Ç/‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç</Text>
            </View>
            <Switch
              value={autoFlaggingEnabled}
              onValueChange={setAutoFlaggingEnabled}
              trackColor={{ false: '#E0E0E0', true: '#4CAF50' }}
              thumbColor={autoFlaggingEnabled ? '#FFFFFF' : '#FFFFFF'}
            />
          </View>
          
          {autoFlaggingEnabled && (
            <View style={styles.statusIndicator}>
              <Text style={styles.statusText}>üü¢ ‡§∏‡•ç‡§µ‡§ö‡§æ‡§≤‡§ø‡§§ ‡§®‡§ø‡§ó‡§∞‡§æ‡§®‡•Ä ‡§ö‡§æ‡§≤‡•Ç - ‡§π‡§∞ 15 ‡§Æ‡§ø‡§®‡§ü ‡§Æ‡•á‡§Ç ‡§Ö‡§™‡§°‡•á‡§ü</Text>
            </View>
          )}
        </View>

        {/* Summary Stats */}
        <View style={styles.summaryContainer}>
          <Text style={styles.summaryTitle}>üìä ‡§´‡•ç‡§≤‡•à‡§ó‡•ç‡§° ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ‡§ì‡§Ç ‡§ï‡§æ ‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂</Text>
          <View style={styles.summaryStats}>
            <View style={styles.summaryItem}>
              <Text style={[styles.summaryNumber, { color: '#D32F2F' }]}>
                {missingDataFlags.filter(f => f.severity === 'critical').length}
              </Text>
              <Text style={styles.summaryLabel}>‡§ó‡§Ç‡§≠‡•Ä‡§∞</Text>
            </View>
            <View style={styles.summaryItem}>
              <Text style={[styles.summaryNumber, { color: '#F44336' }]}>
                {missingDataFlags.filter(f => f.severity === 'high').length}
              </Text>
              <Text style={styles.summaryLabel}>‡§â‡§ö‡•ç‡§ö</Text>
            </View>
            <View style={styles.summaryItem}>
              <Text style={[styles.summaryNumber, { color: '#FF9800' }]}>
                {missingDataFlags.filter(f => f.severity === 'medium').length}
              </Text>
              <Text style={styles.summaryLabel}>‡§Æ‡§ß‡•ç‡§Ø‡§Æ</Text>
            </View>
            <View style={styles.summaryItem}>
              <Text style={[styles.summaryNumber, { color: '#4CAF50' }]}>
                {missingDataFlags.filter(f => f.severity === 'low').length}
              </Text>
              <Text style={styles.summaryLabel}>‡§®‡§ø‡§Æ‡•ç‡§®</Text>
            </View>
          </View>
        </View>

        {/* Severity Filter */}
        <View style={styles.filterContainer}>
          <Text style={styles.filterTitle}>üîç ‡§ó‡§Ç‡§≠‡•Ä‡§∞‡§§‡§æ ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§´‡§ø‡§≤‡•ç‡§ü‡§∞ ‡§ï‡§∞‡•á‡§Ç:</Text>
          <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.filterScroll}>
            {severityOptions.map((option) => (
              <TouchableOpacity
                key={option.id}
                style={[
                  styles.filterButton,
                  selectedSeverity === option.id && styles.activeFilterButton,
                  { borderColor: option.color }
                ]}
                onPress={() => setSelectedSeverity(option.id)}
              >
                <Text style={[
                  styles.filterButtonText,
                  selectedSeverity === option.id && { color: 'white' }
                ]}>
                  {option.label}
                </Text>
              </TouchableOpacity>
            ))}
          </ScrollView>
        </View>

        {/* Bulk Actions */}
        <View style={styles.bulkActionsContainer}>
          <TouchableOpacity style={styles.bulkActionButton} onPress={handleBulkAction}>
            <Text style={styles.bulkActionText}>‚ö° ‡§∏‡§æ‡§Æ‡•Ç‡§π‡§ø‡§ï ‡§ï‡§æ‡§∞‡•ç‡§∞‡§µ‡§æ‡§à</Text>
          </TouchableOpacity>
        </View>

        {/* Flagged Issues */}
        <View style={styles.flagsContainer}>
          <View style={styles.sectionHeader}>
            <Text style={styles.sectionTitle}>
              üö® ‡§´‡•ç‡§≤‡•à‡§ó‡•ç‡§° ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ‡§è‡§Ç ({filteredFlags.length})
            </Text>
          </View>
          
          {filteredFlags.length > 0 ? (
            filteredFlags.map(renderFlagCard)
          ) : (
            <View style={styles.emptyState}>
              <Text style={styles.emptyIcon}>‚úÖ</Text>
              <Text style={styles.emptyTitle}>‡§ï‡•ã‡§à ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä</Text>
              <Text style={styles.emptyText}>
                ‡§á‡§∏ ‡§∂‡•ç‡§∞‡•á‡§£‡•Ä ‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§à ‡§´‡•ç‡§≤‡•à‡§ó‡•ç‡§° ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à
              </Text>
            </View>
          )}
        </View>

        <View style={styles.bottomSpace} />
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F3E5F5',
  },
  header: {
    backgroundColor: '#9C27B0',
    paddingHorizontal: 20,
    paddingTop: 20,
    paddingBottom: 30,
    borderBottomLeftRadius: 25,
    borderBottomRightRadius: 25,
  },
  backButton: {
    alignSelf: 'flex-start',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 20,
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
    marginBottom: 15,
  },
  backButtonText: {
    color: 'white',
    fontSize: 14,
    fontWeight: 'bold',
  },
  titleSection: {
    alignItems: 'center',
  },
  title: {
    fontSize: 20,
    fontWeight: 'bold',
    color: 'white',
    marginBottom: 5,
  },
  subtitle: {
    fontSize: 14,
    color: 'white',
    opacity: 0.9,
    textAlign: 'center',
  },
  controlsContainer: {
    backgroundColor: 'white',
    margin: 20,
    padding: 15,
    borderRadius: 15,
    elevation: 3,
  },
  autoFlaggingControl: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  controlInfo: {
    flex: 1,
  },
  controlTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 3,
  },
  controlSubtitle: {
    fontSize: 12,
    color: '#666',
  },
  statusIndicator: {
    backgroundColor: '#E8F5E8',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 10,
    marginTop: 10,
  },
  statusText: {
    fontSize: 12,
    color: '#2E7D32',
    fontWeight: 'bold',
  },
  summaryContainer: {
    backgroundColor: 'white',
    marginHorizontal: 20,
    marginBottom: 20,
    padding: 15,
    borderRadius: 15,
    elevation: 3,
  },
  summaryTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 15,
    textAlign: 'center',
  },
  summaryStats: {
    flexDirection: 'row',
    justifyContent: 'space-around',
  },
  summaryItem: {
    alignItems: 'center',
  },
  summaryNumber: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 5,
  },
  summaryLabel: {
    fontSize: 12,
    color: '#666',
  },
  filterContainer: {
    paddingHorizontal: 20,
    marginBottom: 15,
  },
  filterTitle: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 10,
  },
  filterScroll: {
    flexDirection: 'row',
  },
  filterButton: {
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 15,
    backgroundColor: 'white',
    marginRight: 8,
    borderWidth: 1,
    elevation: 1,
  },
  activeFilterButton: {
    backgroundColor: '#9C27B0',
  },
  filterButtonText: {
    fontSize: 11,
    color: '#666',
    fontWeight: '500',
  },
  bulkActionsContainer: {
    paddingHorizontal: 20,
    marginBottom: 15,
  },
  bulkActionButton: {
    backgroundColor: '#4CAF50',
    paddingVertical: 12,
    borderRadius: 15,
    alignItems: 'center',
    elevation: 3,
  },
  bulkActionText: {
    color: 'white',
    fontSize: 14,
    fontWeight: 'bold',
  },
  flagsContainer: {
    paddingHorizontal: 20,
  },
  sectionHeader: {
    marginBottom: 15,
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
  },
  flagCard: {
    backgroundColor: 'white',
    borderRadius: 15,
    marginBottom: 15,
    elevation: 3,
    borderLeftWidth: 4,
    overflow: 'hidden',
  },
  flagHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    backgroundColor: '#FAFAFA',
    padding: 15,
  },
  flagTitleSection: {
    flex: 1,
  },
  iconRow: {
    flexDirection: 'row',
    marginBottom: 5,
  },
  typeIcon: {
    fontSize: 18,
    marginRight: 8,
  },
  severityIcon: {
    fontSize: 18,
  },
  flagTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
  },
  severityBadge: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 8,
  },
  severityText: {
    color: 'white',
    fontSize: 10,
    fontWeight: 'bold',
  },
  flagDescription: {
    fontSize: 14,
    color: '#666',
    paddingHorizontal: 15,
    paddingBottom: 10,
    lineHeight: 20,
  },
  schoolInfoSection: {
    paddingHorizontal: 15,
    paddingBottom: 10,
  },
  schoolInfo: {
    backgroundColor: '#F8F9FA',
    padding: 10,
    borderRadius: 8,
  },
  schoolName: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 3,
  },
  schoolDetails: {
    fontSize: 12,
    color: '#666',
    marginBottom: 1,
  },
  statsSection: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingHorizontal: 15,
    paddingVertical: 10,
    backgroundColor: '#F8F9FA',
  },
  statItem: {
    alignItems: 'center',
  },
  statLabel: {
    fontSize: 10,
    color: '#666',
    marginBottom: 2,
  },
  statValue: {
    fontSize: 12,
    fontWeight: 'bold',
    color: '#333',
  },
  contactInfo: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingHorizontal: 15,
    paddingVertical: 8,
  },
  contactLabel: {
    fontSize: 12,
    color: '#666',
  },
  contactNumber: {
    fontSize: 12,
    fontWeight: 'bold',
    color: '#2196F3',
  },
  actionSection: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 15,
    paddingVertical: 10,
    backgroundColor: '#FAFAFA',
  },
  actionRequired: {
    fontSize: 12,
    color: '#666',
    flex: 1,
    marginRight: 10,
  },
  actionButton: {
    paddingHorizontal: 15,
    paddingVertical: 8,
    borderRadius: 15,
  },
  actionButtonText: {
    color: 'white',
    fontSize: 12,
    fontWeight: 'bold',
  },
  flagFooter: {
    paddingHorizontal: 15,
    paddingVertical: 8,
    borderTopWidth: 1,
    borderTopColor: '#F0F0F0',
  },
  flaggedTime: {
    fontSize: 10,
    color: '#999',
    textAlign: 'center',
  },
  emptyState: {
    alignItems: 'center',
    paddingVertical: 50,
    paddingHorizontal: 20,
  },
  emptyIcon: {
    fontSize: 60,
    marginBottom: 15,
  },
  emptyTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 5,
  },
  emptyText: {
    fontSize: 14,
    color: '#666',
    textAlign: 'center',
  },
  bottomSpace: {
    height: 20,
  },
});

export default MissingDataScreen;
