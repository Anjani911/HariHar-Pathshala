import React, { useState } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  ScrollView,
  SafeAreaView,
  Alert,
  Dimensions,
} from 'react-native';

const { width } = Dimensions.get('window');

interface DailyReportScreenProps {
  onBack?: () => void;
}

const DailyReportScreen: React.FC<DailyReportScreenProps> = ({ onBack }) => {
  const [selectedDate, setSelectedDate] = useState('2024-12-16');
  const [reportType, setReportType] = useState('summary');

  // Sample daily progress data
  const dailyData = {
    date: '2024-12-16',
    summary: {
      totalSchools: 176,
      activeSchools: 142,
      totalUploads: 1265,
      newUploadsToday: 89,
      targetAchievement: 78.5,
      topPerformer: 'рд░рд╛рдпрдкреБрд░ рдмреНрд▓реЙрдХ',
      needsAttention: 'рдХреЛрд░рдмрд╛ рдмреНрд▓реЙрдХ',
    },
    blockWiseData: [
      {
        blockName: 'рд░рд╛рдпрдкреБрд░ рдмреНрд▓реЙрдХ',
        schools: 45,
        activeToday: 38,
        uploadsToday: 28,
        totalUploads: 421,
        achievement: 92.5,
        trend: 'up',
        issues: 0,
      },
      {
        blockName: 'рднрд┐рд▓рд╛рдИ рдмреНрд▓реЙрдХ',
        schools: 52,
        activeToday: 41,
        uploadsToday: 22,
        totalUploads: 389,
        achievement: 78.8,
        trend: 'stable',
        issues: 2,
      },
      {
        blockName: 'рджреБрд░реНрдЧ рдмреНрд▓реЙрдХ',
        schools: 38,
        activeToday: 28,
        uploadsToday: 18,
        totalUploads: 267,
        achievement: 65.2,
        trend: 'down',
        issues: 5,
      },
      {
        blockName: 'рдХреЛрд░рдмрд╛ рдмреНрд▓реЙрдХ',
        schools: 41,
        activeToday: 35,
        uploadsToday: 21,
        totalUploads: 188,
        achievement: 44.8,
        trend: 'down',
        issues: 8,
      },
    ],
    hourlyActivity: [
      { hour: '09:00', uploads: 12 },
      { hour: '10:00', uploads: 18 },
      { hour: '11:00', uploads: 15 },
      { hour: '12:00', uploads: 9 },
      { hour: '13:00', uploads: 6 },
      { hour: '14:00', uploads: 14 },
      { hour: '15:00', uploads: 10 },
      { hour: '16:00', uploads: 5 },
    ],
    alerts: [
      {
        type: 'critical',
        message: 'рдХреЛрд░рдмрд╛ рдмреНрд▓реЙрдХ рдореЗрдВ 8 рд╕реНрдХреВрд▓ рдирд┐рд╖реНрдХреНрд░рд┐рдп',
        timestamp: '14:30',
      },
      {
        type: 'warning',
        message: 'рджреБрд░реНрдЧ рдмреНрд▓реЙрдХ рдореЗрдВ рд▓рдХреНрд╖реНрдп рд╕реЗ 20% рдкреАрдЫреЗ',
        timestamp: '13:15',
      },
      {
        type: 'success',
        message: 'рд░рд╛рдпрдкреБрд░ рдмреНрд▓реЙрдХ рдиреЗ рджреИрдирд┐рдХ рд▓рдХреНрд╖реНрдп рдкреВрд░рд╛ рдХрд┐рдпрд╛',
        timestamp: '12:45',
      },
    ],
    teacherActivity: {
      mostActive: 'рд╢реНрд░реА рд░рд╛рдо рдХреБрдорд╛рд░ рд╢рд░реНрдорд╛ (28 uploads)',
      newTeachers: 3,
      inactiveTeachers: 12,
    }
  };

  const reportTypes = [
    { id: 'summary', label: 'ЁЯУК рд╕рд╛рд░рд╛рдВрд╢', icon: 'ЁЯУЛ' },
    { id: 'detailed', label: 'ЁЯУИ рд╡рд┐рд╕реНрддреГрдд', icon: 'ЁЯУК' },
    { id: 'comparative', label: 'ЁЯФН рддреБрд▓рдирд╛рддреНрдордХ', icon: 'тЪЦя╕П' },
    { id: 'trends', label: 'ЁЯУИ рдЯреНрд░реЗрдВрдбреНрд╕', icon: 'ЁЯУЙ' },
  ];

  const getTrendIcon = (trend: string) => {
    switch (trend) {
      case 'up': return 'ЁЯУИ';
      case 'down': return 'ЁЯУЙ';
      case 'stable': return 'тЮбя╕П';
      default: return 'ЁЯУК';
    }
  };

  const getTrendColor = (trend: string) => {
    switch (trend) {
      case 'up': return '#4CAF50';
      case 'down': return '#F44336';
      case 'stable': return '#FF9800';
      default: return '#666';
    }
  };

  const getAchievementColor = (achievement: number) => {
    if (achievement >= 90) return '#4CAF50';
    if (achievement >= 70) return '#8BC34A';
    if (achievement >= 50) return '#FF9800';
    return '#F44336';
  };

  const getAlertColor = (type: string) => {
    switch (type) {
      case 'critical': return '#F44336';
      case 'warning': return '#FF9800';
      case 'success': return '#4CAF50';
      default: return '#666';
    }
  };

  const getAlertIcon = (type: string) => {
    switch (type) {
      case 'critical': return 'ЁЯЪи';
      case 'warning': return 'тЪая╕П';
      case 'success': return 'тЬЕ';
      default: return 'тД╣я╕П';
    }
  };

  const handleExportReport = () => {
    Alert.alert(
      'рд░рд┐рдкреЛрд░реНрдЯ рдПрдХреНрд╕рдкреЛрд░реНрдЯ рдХрд░реЗрдВ',
      'рдХрд┐рд╕ рдлреЙрд░реНрдореЗрдЯ рдореЗрдВ рд░рд┐рдкреЛрд░реНрдЯ рдПрдХреНрд╕рдкреЛрд░реНрдЯ рдХрд░рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?',
      [
        { text: 'PDF рд░рд┐рдкреЛрд░реНрдЯ', onPress: () => Alert.alert('рд╕рдлрд▓рддрд╛!', 'PDF рд░рд┐рдкреЛрд░реНрдЯ рдЬреЗрдирд░реЗрдЯ рд╣реЛ рдЧрдИ') },
        { text: 'Excel рдбреЗрдЯрд╛', onPress: () => Alert.alert('рд╕рдлрд▓рддрд╛!', 'Excel рдлрд╛рдЗрд▓ рддреИрдпрд╛рд░ рд╣реЛ рдЧрдИ') },
        { text: 'Email рднреЗрдЬреЗрдВ', onPress: () => Alert.alert('рдИрдореЗрд▓', 'рд░рд┐рдкреЛрд░реНрдЯ рдИрдореЗрд▓ рднреЗрдЬреА рдЬрд╛ рд░рд╣реА рд╣реИ') },
        { text: 'рд░рджреНрдж рдХрд░реЗрдВ', style: 'cancel' },
      ]
    );
  };

  const handleShareReport = () => {
    Alert.alert(
      'рд░рд┐рдкреЛрд░реНрдЯ рд╕рд╛рдЭрд╛ рдХрд░реЗрдВ',
      'рд░рд┐рдкреЛрд░реНрдЯ рдХрд┐рд╕рдХреЗ рд╕рд╛рде рд╕рд╛рдЭрд╛ рдХрд░рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?',
      [
        { text: 'WhatsApp', onPress: () => Alert.alert('WhatsApp', 'WhatsApp рдкрд░ рднреЗрдЬреА рдЬрд╛ рд░рд╣реА рд╣реИ') },
        { text: 'Email', onPress: () => Alert.alert('Email', 'рдИрдореЗрд▓ рднреЗрдЬреА рдЬрд╛ рд░рд╣реА рд╣реИ') },
        { text: 'рд╕рднреА рдЕрдзрд┐рдХрд╛рд░реА', onPress: () => Alert.alert('рд╕рдлрд▓рддрд╛!', 'рд╕рднреА рд╕рдВрдмрдВрдзрд┐рдд рдЕрдзрд┐рдХрд╛рд░рд┐рдпреЛрдВ рдХреЛ рднреЗрдЬреА рдЧрдИ') },
        { text: 'рд░рджреНрдж рдХрд░реЗрдВ', style: 'cancel' },
      ]
    );
  };

  const handleScheduleReport = () => {
    Alert.alert(
      'рдСрдЯреЛ рд░рд┐рдкреЛрд░реНрдЯ рд╢реЗрдбреНрдпреВрд▓ рдХрд░реЗрдВ',
      'рджреИрдирд┐рдХ рд░рд┐рдкреЛрд░реНрдЯ рдХреЛ рдСрдЯреЛрдореЗрдЯрд┐рдХ рднреЗрдЬрдиреЗ рдХреА рд╕реЗрдЯрд┐рдВрдЧ рдХрд░реЗрдВ',
      [
        { text: 'рд░реЛрдЬ рд╕реБрдмрд╣ 9 рдмрдЬреЗ', onPress: () => Alert.alert('рд╢реЗрдбреНрдпреВрд▓', 'рджреИрдирд┐рдХ 9 AM рд░рд┐рдкреЛрд░реНрдЯ рд╕реЗрдЯ рдХреА рдЧрдИ') },
        { text: 'рд░реЛрдЬ рд╢рд╛рдо 6 рдмрдЬреЗ', onPress: () => Alert.alert('рд╢реЗрдбреНрдпреВрд▓', 'рджреИрдирд┐рдХ 6 PM рд░рд┐рдкреЛрд░реНрдЯ рд╕реЗрдЯ рдХреА рдЧрдИ') },
        { text: 'рдХрд╕реНрдЯрдо рдЯрд╛рдЗрдо', onPress: () => Alert.alert('рдХрд╕реНрдЯрдо', 'рдХрд╕реНрдЯрдо рдЯрд╛рдЗрдо рд╕реЗрдЯрд┐рдВрдЧ рдЬрд▓реНрдж рдЖрдПрдЧреА') },
        { text: 'рд░рджреНрдж рдХрд░реЗрдВ', style: 'cancel' },
      ]
    );
  };

  const renderSummaryView = () => (
    <View style={styles.contentContainer}>
      {/* Key Metrics */}
      <View style={styles.metricsContainer}>
        <Text style={styles.sectionTitle}>ЁЯУК рдореБрдЦреНрдп рдореЗрдЯреНрд░рд┐рдХреНрд╕</Text>
        <View style={styles.metricsGrid}>
          <View style={styles.metricCard}>
            <Text style={styles.metricIcon}>ЁЯПл</Text>
            <Text style={styles.metricValue}>{dailyData.summary.activeSchools}/{dailyData.summary.totalSchools}</Text>
            <Text style={styles.metricLabel}>рд╕рдХреНрд░рд┐рдп рд╕реНрдХреВрд▓</Text>
          </View>
          
          <View style={styles.metricCard}>
            <Text style={styles.metricIcon}>ЁЯУ╕</Text>
            <Text style={styles.metricValue}>{dailyData.summary.newUploadsToday}</Text>
            <Text style={styles.metricLabel}>рдЖрдЬ рдХреЗ рдЕрдкрд▓реЛрдб</Text>
          </View>
          
          <View style={styles.metricCard}>
            <Text style={styles.metricIcon}>ЁЯОп</Text>
            <Text style={[styles.metricValue, { color: getAchievementColor(dailyData.summary.targetAchievement) }]}>
              {dailyData.summary.targetAchievement}%
            </Text>
            <Text style={styles.metricLabel}>рд▓рдХреНрд╖реНрдп рдкреНрд░рд╛рдкреНрддрд┐</Text>
          </View>
          
          <View style={styles.metricCard}>
            <Text style={styles.metricIcon}>ЁЯУИ</Text>
            <Text style={styles.metricValue}>{dailyData.summary.totalUploads}</Text>
            <Text style={styles.metricLabel}>рдХреБрд▓ рдЕрдкрд▓реЛрдб</Text>
          </View>
        </View>
      </View>

      {/* Block Performance */}
      <View style={styles.blockPerformanceContainer}>
        <Text style={styles.sectionTitle}>ЁЯПЫя╕П рдмреНрд▓реЙрдХ-рд╡рд╛рд░ рдкреНрд░рджрд░реНрд╢рди</Text>
        {dailyData.blockWiseData.map((block, index) => (
          <View key={index} style={styles.blockCard}>
            <View style={styles.blockHeader}>
              <Text style={styles.blockName}>{block.blockName}</Text>
              <View style={styles.trendIndicator}>
                <Text style={styles.trendIcon}>{getTrendIcon(block.trend)}</Text>
                <Text style={[styles.achievementText, { color: getAchievementColor(block.achievement) }]}>
                  {block.achievement}%
                </Text>
              </View>
            </View>
            
            <View style={styles.blockStats}>
              <View style={styles.blockStat}>
                <Text style={styles.blockStatValue}>{block.activeToday}/{block.schools}</Text>
                <Text style={styles.blockStatLabel}>рд╕рдХреНрд░рд┐рдп рд╕реНрдХреВрд▓</Text>
              </View>
              
              <View style={styles.blockStat}>
                <Text style={styles.blockStatValue}>{block.uploadsToday}</Text>
                <Text style={styles.blockStatLabel}>рдЖрдЬ рдЕрдкрд▓реЛрдб</Text>
              </View>
              
              <View style={styles.blockStat}>
                <Text style={[styles.blockStatValue, { color: block.issues > 0 ? '#F44336' : '#4CAF50' }]}>
                  {block.issues}
                </Text>
                <Text style={styles.blockStatLabel}>рд╕рдорд╕реНрдпрд╛рдПрдВ</Text>
              </View>
            </View>
          </View>
        ))}
      </View>

      {/* Hourly Activity Chart */}
      <View style={styles.activityContainer}>
        <Text style={styles.sectionTitle}>тП░ рдШрдВрдЯреЗ-рд╡рд╛рд░ рдЧрддрд┐рд╡рд┐рдзрд┐</Text>
        <View style={styles.chartContainer}>
          {dailyData.hourlyActivity.map((activity, index) => (
            <View key={index} style={styles.chartBar}>
              <View style={[styles.bar, { height: Math.max(activity.uploads * 3, 10) }]} />
              <Text style={styles.chartLabel}>{activity.hour}</Text>
              <Text style={styles.chartValue}>{activity.uploads}</Text>
            </View>
          ))}
        </View>
      </View>

      {/* Alerts */}
      <View style={styles.alertsContainer}>
        <Text style={styles.sectionTitle}>ЁЯЪи рдЖрдЬ рдХреА рдЕрд▓рд░реНрдЯреНрд╕</Text>
        {dailyData.alerts.map((alert, index) => (
          <View key={index} style={[styles.alertCard, { borderLeftColor: getAlertColor(alert.type) }]}>
            <Text style={styles.alertIcon}>{getAlertIcon(alert.type)}</Text>
            <View style={styles.alertContent}>
              <Text style={styles.alertMessage}>{alert.message}</Text>
              <Text style={styles.alertTime}>{alert.timestamp}</Text>
            </View>
          </View>
        ))}
      </View>
    </View>
  );

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView showsVerticalScrollIndicator={false}>
        {/* Header */}
        <View style={styles.header}>
          <TouchableOpacity style={styles.backButton} onPress={onBack}>
            <Text style={styles.backButtonText}>тЖР рд╡рд╛рдкрд╕</Text>
          </TouchableOpacity>
          
          <View style={styles.titleSection}>
            <Text style={styles.title}>ЁЯУЛ Daily Progress Report View/Export</Text>
            <Text style={styles.subtitle}>рджреИрдирд┐рдХ рдкреНрд░рдЧрддрд┐ рд░рд┐рдкреЛрд░реНрдЯ - {selectedDate}</Text>
          </View>
        </View>

        {/* Date and Report Type Selection */}
        <View style={styles.controlsContainer}>
          <View style={styles.dateSelector}>
            <TouchableOpacity style={styles.dateButton}>
              <Text style={styles.dateButtonText}>ЁЯУЕ {selectedDate}</Text>
            </TouchableOpacity>
          </View>
          
          <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.reportTypeScroll}>
            {reportTypes.map((type) => (
              <TouchableOpacity
                key={type.id}
                style={[
                  styles.reportTypeButton,
                  reportType === type.id && styles.activeReportTypeButton
                ]}
                onPress={() => setReportType(type.id)}
              >
                <Text style={styles.reportTypeIcon}>{type.icon}</Text>
                <Text style={[
                  styles.reportTypeText,
                  reportType === type.id && styles.activeReportTypeText
                ]}>
                  {type.label}
                </Text>
              </TouchableOpacity>
            ))}
          </ScrollView>
        </View>

        {/* Action Buttons */}
        <View style={styles.actionButtonsContainer}>
          <TouchableOpacity style={[styles.actionButton, styles.exportButton]} onPress={handleExportReport}>
            <Text style={styles.actionButtonText}>ЁЯУд рдПрдХреНрд╕рдкреЛрд░реНрдЯ</Text>
          </TouchableOpacity>
          
          <TouchableOpacity style={[styles.actionButton, styles.shareButton]} onPress={handleShareReport}>
            <Text style={styles.actionButtonText}>ЁЯУв рд╕рд╛рдЭрд╛ рдХрд░реЗрдВ</Text>
          </TouchableOpacity>
          
          <TouchableOpacity style={[styles.actionButton, styles.scheduleButton]} onPress={handleScheduleReport}>
            <Text style={styles.actionButtonText}>тП░ рд╢реЗрдбреНрдпреВрд▓</Text>
          </TouchableOpacity>
        </View>

        {/* Report Content */}
        {renderSummaryView()}

        <View style={styles.bottomSpace} />
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F3E5F5',
  },
  header: {
    backgroundColor: '#9C27B0',
    paddingHorizontal: 20,
    paddingTop: 20,
    paddingBottom: 30,
    borderBottomLeftRadius: 25,
    borderBottomRightRadius: 25,
  },
  backButton: {
    alignSelf: 'flex-start',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 20,
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
    marginBottom: 15,
  },
  backButtonText: {
    color: 'white',
    fontSize: 14,
    fontWeight: 'bold',
  },
  titleSection: {
    alignItems: 'center',
  },
  title: {
    fontSize: 18,
    fontWeight: 'bold',
    color: 'white',
    marginBottom: 5,
    textAlign: 'center',
  },
  subtitle: {
    fontSize: 14,
    color: 'white',
    opacity: 0.9,
  },
  controlsContainer: {
    paddingHorizontal: 20,
    paddingVertical: 20,
  },
  dateSelector: {
    marginBottom: 15,
  },
  dateButton: {
    backgroundColor: 'white',
    paddingHorizontal: 15,
    paddingVertical: 10,
    borderRadius: 15,
    alignSelf: 'center',
    elevation: 2,
  },
  dateButtonText: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#333',
  },
  reportTypeScroll: {
    flexDirection: 'row',
  },
  reportTypeButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'white',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 15,
    marginRight: 8,
    elevation: 2,
  },
  activeReportTypeButton: {
    backgroundColor: '#9C27B0',
  },
  reportTypeIcon: {
    fontSize: 14,
    marginRight: 5,
  },
  reportTypeText: {
    fontSize: 12,
    color: '#666',
    fontWeight: '500',
  },
  activeReportTypeText: {
    color: 'white',
  },
  actionButtonsContainer: {
    flexDirection: 'row',
    paddingHorizontal: 20,
    paddingBottom: 20,
    justifyContent: 'space-around',
  },
  actionButton: {
    paddingHorizontal: 15,
    paddingVertical: 10,
    borderRadius: 15,
    elevation: 2,
    flex: 1,
    marginHorizontal: 5,
    alignItems: 'center',
  },
  exportButton: {
    backgroundColor: '#4CAF50',
  },
  shareButton: {
    backgroundColor: '#2196F3',
  },
  scheduleButton: {
    backgroundColor: '#FF9800',
  },
  actionButtonText: {
    color: 'white',
    fontSize: 12,
    fontWeight: 'bold',
  },
  contentContainer: {
    paddingHorizontal: 20,
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 15,
  },
  metricsContainer: {
    marginBottom: 25,
  },
  metricsGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
  },
  metricCard: {
    backgroundColor: 'white',
    width: (width - 50) / 2,
    alignItems: 'center',
    paddingVertical: 15,
    paddingHorizontal: 10,
    borderRadius: 15,
    marginBottom: 10,
    elevation: 2,
  },
  metricIcon: {
    fontSize: 24,
    marginBottom: 8,
  },
  metricValue: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 5,
  },
  metricLabel: {
    fontSize: 11,
    color: '#666',
    textAlign: 'center',
  },
  blockPerformanceContainer: {
    marginBottom: 25,
  },
  blockCard: {
    backgroundColor: 'white',
    borderRadius: 15,
    marginBottom: 10,
    elevation: 2,
    overflow: 'hidden',
  },
  blockHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    backgroundColor: '#F8F9FA',
    padding: 15,
  },
  blockName: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#333',
  },
  trendIndicator: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  trendIcon: {
    fontSize: 16,
    marginRight: 5,
  },
  achievementText: {
    fontSize: 14,
    fontWeight: 'bold',
  },
  blockStats: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    paddingVertical: 12,
  },
  blockStat: {
    alignItems: 'center',
  },
  blockStatValue: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 2,
  },
  blockStatLabel: {
    fontSize: 10,
    color: '#666',
  },
  activityContainer: {
    marginBottom: 25,
  },
  chartContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    backgroundColor: 'white',
    paddingHorizontal: 15,
    paddingVertical: 20,
    borderRadius: 15,
    elevation: 2,
  },
  chartBar: {
    alignItems: 'center',
  },
  bar: {
    backgroundColor: '#9C27B0',
    width: 20,
    borderRadius: 2,
    marginBottom: 5,
  },
  chartLabel: {
    fontSize: 9,
    color: '#666',
    marginBottom: 2,
  },
  chartValue: {
    fontSize: 10,
    fontWeight: 'bold',
    color: '#333',
  },
  alertsContainer: {
    marginBottom: 25,
  },
  alertCard: {
    flexDirection: 'row',
    backgroundColor: 'white',
    borderRadius: 12,
    marginBottom: 8,
    elevation: 2,
    borderLeftWidth: 4,
    padding: 12,
  },
  alertIcon: {
    fontSize: 20,
    marginRight: 12,
  },
  alertContent: {
    flex: 1,
  },
  alertMessage: {
    fontSize: 13,
    color: '#333',
    fontWeight: '500',
    marginBottom: 3,
  },
  alertTime: {
    fontSize: 11,
    color: '#666',
  },
  bottomSpace: {
    height: 20,
  },
});

export default DailyReportScreen;
