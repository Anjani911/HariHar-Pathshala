import React, { useState } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  ScrollView,
  Alert,
  TextInput,
  SafeAreaView,
} from 'react-native';

interface PhotoUploadScreenProps {
  onBack?: () => void;
}

const PhotoUploadScreen: React.FC<PhotoUploadScreenProps> = ({ onBack }) => {
  const [selectedStudent, setSelectedStudent] = useState('');
  const [treeName, setTreeName] = useState('');
  const [capturedPhoto, setCapturedPhoto] = useState<string | null>(null);
  const [isUploading, setIsUploading] = useState(false);

  // Sample student data - рдЗрд╕реЗ рдЖрдк backend рд╕реЗ fetch рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ
  const students = [
    { id: '1', name: 'рдЕрдорди рд╢рд░реНрдорд╛' },
    { id: '2', name: 'рдкреНрд░рд┐рдпрд╛ рдЧреБрдкреНрддрд╛' },
    { id: '3', name: 'рд░рд╛рд╣реБрд▓ рд╡рд░реНрдорд╛' },
    { id: '4', name: 'рдЕрдиреАрддрд╛ рджреЗрд╡реА' },
    { id: '5', name: 'рд╡рд┐рдХрд╛рд╕ рдХреБрдорд╛рд░' },
    { id: '6', name: 'рд╕реБрдиреАрддрд╛ рд░рд╛рдп' },
    { id: '7', name: 'рдЕрдЬрдп рд╕рд┐рдВрд╣' },
    { id: '8', name: 'рдкреВрдЬрд╛ рдорд┐рд╢реНрд░рд╛' },
    { id: '9', name: 'рд░реЛрд╣рд┐рдд рдкрдЯреЗрд▓' },
    { id: '10', name: 'рдорд╛рдпрд╛ рд╢реБрдХреНрд▓рд╛' },
  ];

  const getCurrentDateTime = () => {
    const now = new Date();
    return now.toLocaleString('hi-IN', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  const handleCameraPress = () => {
    Alert.alert(
      'рдлреЛрдЯреЛ рдЪреБрдиреЗрдВ',
      'рдЖрдк рдлреЛрдЯреЛ рдХреИрд╕реЗ рд▓реЗрдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?',
      [
        { text: 'рдХреИрдорд░рд╛', onPress: () => openCamera() },
        { text: 'рдЧреИрд▓рд░реА', onPress: () => openGallery() },
        { text: 'рд░рджреНрдж рдХрд░реЗрдВ', style: 'cancel' },
      ]
    );
  };

  const openCamera = () => {
    // рдпрд╣рд╛рдВ Camera API integration рд╣реЛрдЧрд╛ - expo-camera рдпрд╛ react-native-image-picker
    Alert.alert('рдХреИрдорд░рд╛', 'рдХреИрдорд░рд╛ рдЦреЛрд▓рд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИ...', [
      {
        text: 'OK',
        onPress: () => {
          // Demo рдХреЗ рд▓рд┐рдП placeholder image set рдХрд░ рд░рд╣реЗ рд╣реИрдВ
          setCapturedPhoto('camera_demo');
        },
      },
    ]);
  };

  const openGallery = () => {
    // рдпрд╣рд╛рдВ Gallery API integration рд╣реЛрдЧрд╛ - expo-image-picker
    Alert.alert('рдЧреИрд▓рд░реА', 'рдЧреИрд▓рд░реА рдЦреЛрд▓реА рдЬрд╛ рд░рд╣реА рд╣реИ...', [
      {
        text: 'OK',
        onPress: () => {
          // Demo рдХреЗ рд▓рд┐рдП placeholder image set рдХрд░ рд░рд╣реЗ рд╣реИрдВ
          setCapturedPhoto('gallery_demo');
        },
      },
    ]);
  };

  const handleUpload = () => {
    if (!selectedStudent) {
      Alert.alert('рддреНрд░реБрдЯрд┐', 'рдХреГрдкрдпрд╛ рдЫрд╛рддреНрд░ рдХрд╛ рдЪрдпрди рдХрд░реЗрдВ');
      return;
    }

    if (!capturedPhoto) {
      Alert.alert('рддреНрд░реБрдЯрд┐', 'рдХреГрдкрдпрд╛ рдлреЛрдЯреЛ рд▓реЗрдВ рдпрд╛ рдЪреБрдиреЗрдВ');
      return;
    }

    setIsUploading(true);

    // Demo рдХреЗ рд▓рд┐рдП setTimeout - рдпрд╣рд╛рдВ рдЖрдк actual API call рдХрд░реЗрдВрдЧреЗ
    setTimeout(() => {
      setIsUploading(false);
      Alert.alert(
        'рд╕рдлрд▓рддрд╛!',
        'рдлреЛрдЯреЛ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдЕрдкрд▓реЛрдб рд╣реЛ рдЧрдИ рд╣реИ',
        [
          {
            text: 'OK',
            onPress: () => {
              // Reset form
              setSelectedStudent('');
              setTreeName('');
              setCapturedPhoto(null);
            },
          },
        ]
      );
    }, 2000);
  };

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView showsVerticalScrollIndicator={false}>
        {/* Header */}
        <View style={styles.header}>
          <TouchableOpacity style={styles.backButton} onPress={onBack}>
            <Text style={styles.backButtonText}>тЖР рд╡рд╛рдкрд╕</Text>
          </TouchableOpacity>
          
          <View style={styles.titleSection}>
            <Text style={styles.title}>ЁЯУ╕ рдлреЛрдЯреЛ рдЕрдкрд▓реЛрдб</Text>
            <Text style={styles.subtitle}>рдПрдХ рдкреЗрдбрд╝ рдорд╛рдБ рдХреЗ рдирд╛рдо 2.0</Text>
          </View>
        </View>

        <View style={styles.formContainer}>
          {/* рдЫрд╛рддреНрд░ рдХрд╛ рдирд╛рдо / ID */}
          <View style={styles.fieldContainer}>
            <Text style={styles.fieldLabel}>тЬЕ рдЫрд╛рддреНрд░ рдХрд╛ рдирд╛рдо / ID *</Text>
            <View style={styles.pickerContainer}>
              <TouchableOpacity 
                style={styles.studentSelector}
                onPress={() => {
                  Alert.alert(
                    'рдЫрд╛рддреНрд░ рдЪреБрдиреЗрдВ',
                    '',
                    [
                      ...students.map(student => ({
                        text: `${student.name} (ID: ${student.id})`,
                        onPress: () => setSelectedStudent(student.id)
                      })),
                      { text: 'рд░рджреНрдж рдХрд░реЗрдВ', style: 'cancel' }
                    ]
                  );
                }}
              >
                <Text style={styles.selectorText}>
                  {selectedStudent 
                    ? students.find(s => s.id === selectedStudent)?.name + ` (ID: ${selectedStudent})` 
                    : 'рдЫрд╛рддреНрд░ рдЪреБрдиреЗрдВ...'
                  }
                </Text>
                <Text style={styles.dropdownArrow}>тЦ╝</Text>
              </TouchableOpacity>
            </View>
          </View>

          {/* рдлреЛрдЯреЛ Section */}
          <View style={styles.fieldContainer}>
            <Text style={styles.fieldLabel}>тЬЕ рдлреЛрдЯреЛ (Camera/Gallery) *</Text>
            <Text style={styles.photoSubtitle}>рдЫрд╛рддреНрд░ + рдкреЗрдбрд╝ + рдорд╛рдБ рдпрд╛ рдорд╣рд┐рд▓рд╛ рд╢рд┐рдХреНрд╖рд┐рдХрд╛</Text>
            
            <TouchableOpacity style={styles.photoButton} onPress={handleCameraPress}>
              {capturedPhoto ? (
                <View style={styles.photoPreview}>
                  <View style={styles.photoPlaceholder}>
                    <Text style={styles.photoIcon}>ЁЯУ╖</Text>
                    <Text style={styles.photoText}>рдлреЛрдЯреЛ рдЪреБрдиреА рдЧрдИ</Text>
                  </View>
                  <TouchableOpacity 
                    style={styles.changePhotoButton}
                    onPress={handleCameraPress}
                  >
                    <Text style={styles.changePhotoText}>рдмрджрд▓реЗрдВ</Text>
                  </TouchableOpacity>
                </View>
              ) : (
                <View style={styles.photoPlaceholder}>
                  <Text style={styles.photoIcon}>ЁЯУ╕</Text>
                  <Text style={styles.photoText}>рдлреЛрдЯреЛ рд▓реЗрдВ рдпрд╛ рдЪреБрдиреЗрдВ</Text>
                  <Text style={styles.photoHint}>рдХреИрдорд░рд╛ рдпрд╛ рдЧреИрд▓рд░реА рд╕реЗ</Text>
                </View>
              )}
            </TouchableOpacity>
          </View>

          {/* рдкреЗрдбрд╝ рдХрд╛ рдирд╛рдо */}
          <View style={styles.fieldContainer}>
            <Text style={styles.fieldLabel}>тЬЕ рдкреЗрдбрд╝ рдХрд╛ рдирд╛рдо (рд╡реИрдХрд▓реНрдкрд┐рдХ)</Text>
            <TextInput
              style={styles.textInput}
              value={treeName}
              onChangeText={setTreeName}
              placeholder="рдЬреИрд╕реЗ: рдиреАрдо, рдЖрдо, рдкреАрдкрд▓, рдмрд░рдЧрдж..."
              placeholderTextColor="#999"
            />
          </View>

          {/* Upload Date & Time */}
          <View style={styles.fieldContainer}>
            <Text style={styles.fieldLabel}>тЬЕ рдЕрдкрд▓реЛрдб рджрд┐рдирд╛рдВрдХ рдФрд░ рд╕рдордп</Text>
            <View style={styles.dateTimeContainer}>
              <Text style={styles.dateTimeText}>{getCurrentDateTime()}</Text>
              <Text style={styles.autoSetText}>рд╕реНрд╡рдЪрд╛рд▓рд┐рдд рд╕реЗрдЯ</Text>
            </View>
          </View>

          {/* Upload Button */}
          <TouchableOpacity 
            style={[
              styles.uploadButton,
              (!selectedStudent || !capturedPhoto || isUploading) && styles.uploadButtonDisabled
            ]}
            onPress={handleUpload}
            disabled={!selectedStudent || !capturedPhoto || isUploading}
          >
            <Text style={styles.uploadButtonText}>
              {isUploading ? 'тП│ рдЕрдкрд▓реЛрдб рд╣реЛ рд░рд╣рд╛ рд╣реИ...' : 'ЁЯУд рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ'}
            </Text>
          </TouchableOpacity>

          {/* Info Box */}
          <View style={styles.infoBox}>
            <Text style={styles.infoTitle}>ЁЯУЭ рдорд╣рддреНрд╡рдкреВрд░реНрдг рдирд┐рд░реНрджреЗрд╢:</Text>
            <Text style={styles.infoText}>тАв рдлреЛрдЯреЛ рдореЗрдВ рдЫрд╛рддреНрд░, рдкреЗрдбрд╝ рдФрд░ рдорд╛рдБ/рдорд╣рд┐рд▓рд╛ рд╢рд┐рдХреНрд╖рд┐рдХрд╛ рджрд┐рдЦрдиреА рдЪрд╛рд╣рд┐рдП</Text>
            <Text style={styles.infoText}>тАв рдлреЛрдЯреЛ рд╕рд╛рдл рдФрд░ рд╕реНрдкрд╖реНрдЯ рд╣реЛрдиреА рдЪрд╛рд╣рд┐рдП</Text>
            <Text style={styles.infoText}>тАв рдЫрд╛рддреНрд░ рдХрд╛ рдЪрдпрди рдХрд░рдирд╛ рдЕрдирд┐рд╡рд╛рд░реНрдп рд╣реИ</Text>
            <Text style={styles.infoText}>тАв рдкреЗрдбрд╝ рдХрд╛ рдирд╛рдо рд╡реИрдХрд▓реНрдкрд┐рдХ рд╣реИ рд▓реЗрдХрд┐рди рдмреЗрд╣рддрд░ рд╣реЛрдЧрд╛</Text>
            <Text style={styles.infoText}>тАв рдЕрдкрд▓реЛрдб рдХрд╛ рд╕рдордп рд╕реНрд╡рдЪрд╛рд▓рд┐рдд рд░реВрдк рд╕реЗ рд░рд┐рдХреЙрд░реНрдб рд╣реЛ рдЬрд╛рдПрдЧрд╛</Text>
          </View>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#E8F5E8',
  },
  header: {
    backgroundColor: '#4CAF50',
    paddingHorizontal: 20,
    paddingTop: 20,
    paddingBottom: 30,
    borderBottomLeftRadius: 25,
    borderBottomRightRadius: 25,
  },
  backButton: {
    alignSelf: 'flex-start',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 20,
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
    marginBottom: 15,
  },
  backButtonText: {
    color: 'white',
    fontSize: 14,
    fontWeight: 'bold',
  },
  titleSection: {
    alignItems: 'center',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: 'white',
    marginBottom: 5,
  },
  subtitle: {
    fontSize: 16,
    color: 'white',
    opacity: 0.9,
  },
  formContainer: {
    paddingHorizontal: 20,
    paddingTop: 25,
  },
  fieldContainer: {
    marginBottom: 25,
  },
  fieldLabel: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#2E7D32',
    marginBottom: 8,
  },
  pickerContainer: {
    backgroundColor: 'white',
    borderRadius: 12,
    borderWidth: 2,
    borderColor: '#C8E6C9',
    elevation: 2,
  },
  studentSelector: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 15,
    paddingVertical: 15,
  },
  selectorText: {
    fontSize: 16,
    color: '#333',
    flex: 1,
  },
  dropdownArrow: {
    fontSize: 12,
    color: '#666',
  },
  photoButton: {
    backgroundColor: 'white',
    borderRadius: 12,
    borderWidth: 2,
    borderColor: '#C8E6C9',
    borderStyle: 'dashed',
    padding: 20,
    alignItems: 'center',
    elevation: 2,
    minHeight: 120,
    justifyContent: 'center',
  },
  photoSubtitle: {
    fontSize: 12,
    color: '#666',
    marginBottom: 10,
    fontStyle: 'italic',
  },
  photoPreview: {
    alignItems: 'center',
    width: '100%',
  },
  photoPlaceholder: {
    alignItems: 'center',
  },
  photoIcon: {
    fontSize: 40,
    marginBottom: 10,
  },
  photoText: {
    fontSize: 16,
    color: '#4CAF50',
    fontWeight: 'bold',
    marginBottom: 5,
  },
  photoHint: {
    fontSize: 12,
    color: '#666',
  },
  changePhotoButton: {
    marginTop: 10,
    paddingHorizontal: 15,
    paddingVertical: 8,
    backgroundColor: '#4CAF50',
    borderRadius: 20,
  },
  changePhotoText: {
    color: 'white',
    fontSize: 12,
    fontWeight: 'bold',
  },
  textInput: {
    backgroundColor: 'white',
    borderRadius: 12,
    borderWidth: 2,
    borderColor: '#C8E6C9',
    paddingHorizontal: 15,
    paddingVertical: 12,
    fontSize: 16,
    color: '#333',
    elevation: 2,
  },
  dateTimeContainer: {
    backgroundColor: '#F1F8E9',
    borderRadius: 12,
    padding: 15,
    borderWidth: 1,
    borderColor: '#C8E6C9',
  },
  dateTimeText: {
    fontSize: 16,
    color: '#2E7D32',
    fontWeight: 'bold',
    marginBottom: 5,
  },
  autoSetText: {
    fontSize: 12,
    color: '#4CAF50',
    fontStyle: 'italic',
  },
  uploadButton: {
    backgroundColor: '#4CAF50',
    borderRadius: 15,
    paddingVertical: 15,
    alignItems: 'center',
    marginTop: 10,
    elevation: 3,
  },
  uploadButtonDisabled: {
    backgroundColor: '#A5D6A7',
    elevation: 1,
  },
  uploadButtonText: {
    color: 'white',
    fontSize: 18,
    fontWeight: 'bold',
  },
  infoBox: {
    backgroundColor: '#FFF3E0',
    borderRadius: 12,
    padding: 15,
    marginTop: 20,
    borderWidth: 1,
    borderColor: '#FFE0B2',
  },
  infoTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#E65100',
    marginBottom: 10,
  },
  infoText: {
    fontSize: 14,
    color: '#BF360C',
    marginBottom: 5,
    lineHeight: 20,
  },
});

export default PhotoUploadScreen;
